 import string
import random
import sqlite3
from tkinter import *
from tkinter import messagebox

# Database setup
with sqlite3.connect("users.db") as db:
    cursor = db.cursor()
cursor.execute("CREATE TABLE IF NOT EXISTS users(Username TEXT NOT NULL, GeneratedPassword TEXT NOT NULL);")
db.commit()
db.close()


class PasswordGeneratorGUI:
    def __init__(self, master):
        self.master = master
        self.master.title('Password Generator')
        self.master.geometry('660x500')
        self.master.config(bg='#333333')  # Changed background color
        self.master.resizable(False, False)

        self.username = StringVar()
        self.password_len = StringVar()  # Changed to StringVar to handle input validation
        self.generated_password = StringVar()

        # UI Setup
        Label(master, text=":PASSWORD GENERATOR:", anchor=N, fg='#FFD700', bg='#333333',
              font='Helvetica 22 bold italic').grid(row=0, column=1)

        self._create_label("", 1, 0, 2)
        self._create_label("Enter User Name: ", 4, 0, font='Arial 15', fg='#00FF00')
        Entry(master, textvariable=self.username, font='Arial 15', bd=6, relief='ridge').grid(row=4, column=1)

        self._create_label("", 5, 0)
        self._create_label("Enter Password Length: ", 6, 0, font='Arial 15', fg='#00FF00')
        Entry(master, textvariable=self.password_len, font='Arial 15', bd=6, relief='ridge').grid(row=6, column=1)

        self._create_label("", 7, 0)
        self._create_label("Generated Password: ", 8, 0, font='Arial 15', fg='#00FF00')
        Entry(master, textvariable=self.generated_password, font='Arial 15', bd=6, relief='ridge', fg='#FF4500').grid(
            row=8, column=1)

        self._create_label("", 9, 0)
        self._create_button("GENERATE PASSWORD", self.generate_pass, 11, 1, font='Verdana 15 bold', fg='#FFFFFF',
                            bg='#1E90FF')
        self._create_label("", 12, 0)
        self._create_button("ACCEPT", self.accept_fields, 13, 1, font='Verdana 15 bold', fg='#FFFFFF', bg='#32CD32')
        self._create_label("", 14, 1)
        self._create_button("RESET", self.reset_fields, 15, 1, font='Verdana 15 bold', fg='#FFFFFF', bg='#FF6347')

    def _create_label(self, text, row, col, col_span=1, font='Arial 15', fg='#00FF00', bg='#333333'):
        Label(self.master, text=text, font=font, fg=fg, bg=bg).grid(row=row, column=col, columnspan=col_span)

    def _create_button(self, text, command, row, col, **kwargs):
        Button(self.master, text=text, command=command, bd=3, relief='solid', padx=1, pady=1, **kwargs).grid(row=row,
                                                                                                             column=col)

    def generate_pass(self):
        try:
            length = int(self.password_len.get())  # Validate the password length input
            if length < 6:
                raise ValueError("Password must be at least 6 characters long")
        except ValueError as e:
            messagebox.showerror("Error", str(e))
            return

        upper = list("ABCDEFGHIJKLMNOPQRSTUVWXYZ")
        lower = list("abcdefghijklmnopqrstuvwxyz")
        chars = list("@#%&()\"?!")
        numbers = list("1234567890")

        u = random.randint(1, length - 3)
        l = random.randint(1, length - 2 - u)
        c = random.randint(1, length - 1 - u - l)
        n = length - u - l - c

        password = random.sample(upper, u) + random.sample(lower, l) + random.sample(chars, c) + random.sample(numbers,
                                                                                                               n)
        random.shuffle(password)
        generated_password = "".join(password)
        self.generated_password.set(generated_password)

    def accept_fields(self):
        with sqlite3.connect("users.db") as db:
            cursor = db.cursor()
            cursor.execute("SELECT * FROM users WHERE Username = ?", (self.username.get(),))

            if cursor.fetchone():
                messagebox.showerror("Error", "This username already exists! Please use another username.")
            else:
                cursor.execute("INSERT INTO users(Username, GeneratedPassword) VALUES(?, ?)",
                               (self.username.get(), self.generated_password.get()))
                db.commit()
                messagebox.showinfo("Success", "Password generated and saved successfully")

    def reset_fields(self):
        self.username.set("")
        self.password_len.set("")
        self.generated_password.set("")


if __name__ == '__main__':
    root = Tk()
    app = PasswordGeneratorGUI(root)
    root.mainloop()
